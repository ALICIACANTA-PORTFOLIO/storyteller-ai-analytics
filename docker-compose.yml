version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: audiomind-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-audiomind}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-audiomind_dev_password}
      POSTGRES_DB: ${DB_NAME:-audiomind_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-audiomind}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audiomind-network

  # Redis (for Celery task queue)
  redis:
    image: redis:7-alpine
    container_name: audiomind-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-audiomind_redis_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audiomind-network

  # ChromaDB (Vector Database for RAG)
  chromadb:
    image: chromadb/chroma:latest
    container_name: audiomind-chromadb
    restart: unless-stopped
    environment:
      CHROMA_SERVER_AUTHN_CREDENTIALS: ${CHROMA_TOKEN:-audiomind_chroma_token}
      CHROMA_SERVER_AUTHN_PROVIDER: chromadb.auth.token_authn.TokenAuthenticationServerProvider
      PERSIST_DIRECTORY: /chroma/chroma
    ports:
      - "${CHROMA_PORT:-8000}:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - audiomind-network

  # PgAdmin (Optional - Database Administration UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: audiomind-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@audiomind.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - audiomind-network
    profiles:
      - admin  # Solo se inicia con: docker-compose --profile admin up

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  audiomind-network:
    driver: bridge
