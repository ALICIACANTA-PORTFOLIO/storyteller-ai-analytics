# ============================================================================
# AUDIOMIND - Python Project Configuration
# ============================================================================
# Purpose: Modern Python project configuration with tool settings
# Standard: PEP 518, PEP 621
# ============================================================================

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "audiomind"
version = "1.0.0"
description = "AI-Powered Audio Knowledge Intelligence - Transform audio into actionable insights"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Alicia Canta", email = "your.email@example.com"}
]
maintainers = [
    {name = "Alicia Canta", email = "your.email@example.com"}
]
keywords = [
    "audio-processing",
    "transcription",
    "whisper",
    "topic-modeling",
    "llm",
    "rag",
    "nlp",
    "ai",
    "machine-learning",
    "data-science"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "openai-whisper>=20231117",
    "gensim>=4.3.0",
    "openai>=1.3.0",
    "langchain>=0.1.0",
    "chromadb>=0.4.0",
    "streamlit>=1.28.0",
    "plotly>=5.18.0",
    "sqlalchemy>=2.0.0",
    "celery>=5.3.0",
    "redis>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
]
all = [
    "audiomind[dev,docs,monitoring]",
]

[project.urls]
Homepage = "https://github.com/yourusername/audiomind"
Documentation = "https://audiomind.readthedocs.io"
Repository = "https://github.com/yourusername/audiomind"
Issues = "https://github.com/yourusername/audiomind/issues"
Changelog = "https://github.com/yourusername/audiomind/blob/main/CHANGELOG.md"

[project.scripts]
audiomind = "app.cli:main"
audiomind-api = "app.main:run_api"
audiomind-worker = "app.worker:run_worker"
audiomind-dashboard = "app.dashboard.main:run"

# ============================================================================
# TOOL CONFIGURATION
# ============================================================================

# ----------------------------------------------------------------------------
# BLACK - Code Formatter
# ----------------------------------------------------------------------------
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# ----------------------------------------------------------------------------
# RUFF - Fast Python Linter
# ----------------------------------------------------------------------------
[tool.ruff]
line-length = 100
target-version = "py310"

# Enable pycodestyle (E, W), Pyflakes (F), isort (I), and others
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T",   # flake8-print
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",  # Line too long (handled by Black)
    "B008",  # Do not perform function call in argument defaults
    "S101",  # Use of assert (allowed in tests)
]

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py
"tests/**/*.py" = ["S101", "ARG001"]  # Allow assert and unused arguments in tests

[tool.ruff.isort]
known-first-party = ["app"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.mccabe]
max-complexity = 10

# ----------------------------------------------------------------------------
# MYPY - Static Type Checker
# ----------------------------------------------------------------------------
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = false  # Too strict for ML libraries
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "whisper.*",
    "gensim.*",
    "bertopic.*",
    "pyLDAvis.*",
    "streamlit.*",
    "celery.*",
    "chromadb.*",
]
ignore_missing_imports = true

# ----------------------------------------------------------------------------
# PYTEST - Testing Framework
# ----------------------------------------------------------------------------
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Raise error on unknown markers
    "--strict-config",        # Raise error on config issues
    "--cov=app",             # Coverage for app directory
    "--cov-report=html",     # HTML coverage report
    "--cov-report=term-missing",  # Terminal coverage with missing lines
    "--cov-fail-under=80",   # Fail if coverage < 80%
    "-v",                     # Verbose output
    "-s",                     # Show print statements
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
]

# ----------------------------------------------------------------------------
# COVERAGE - Code Coverage
# ----------------------------------------------------------------------------
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/config/*",
]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# ----------------------------------------------------------------------------
# BANDIT - Security Linter
# ----------------------------------------------------------------------------
[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True warnings

# ============================================================================
# SETUPTOOLS CONFIGURATION
# ============================================================================

[tool.setuptools]
package-dir = {"" = "."}
packages = ["app"]

[tool.setuptools.package-data]
app = ["py.typed"]

# ============================================================================
# NOTES:
# 
# 1. Installation:
#    pip install -e .              # Editable install
#    pip install -e ".[dev]"       # With dev dependencies
#    pip install -e ".[all]"       # With all optional dependencies
# 
# 2. Code Quality Commands:
#    black .                       # Format code
#    ruff check .                  # Lint code
#    ruff check . --fix            # Lint and auto-fix
#    mypy app                      # Type check
# 
# 3. Testing Commands:
#    pytest                        # Run all tests
#    pytest -m unit                # Run unit tests only
#    pytest -m "not slow"          # Skip slow tests
#    pytest --cov                  # Run with coverage
# 
# 4. Pre-commit:
#    pre-commit install            # Install git hooks
#    pre-commit run --all-files    # Run all hooks
# 
# 5. Documentation:
#    mkdocs serve                  # Local preview
#    mkdocs build                  # Build static site
# ============================================================================
