[pytest]
# Pytest Configuration for AudioMind

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Asyncio configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Output options
addopts = 
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Show summary of all test outcomes
    -ra
    # Enable strict markers (require registration)
    --strict-markers
    # Fail on warnings (comment out during development)
    # -Werror
    # Coverage options
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    # Disable warnings summary (optional)
    --disable-warnings

# Minimum coverage percentage (CI will enforce this)
# Uncomment when ready:
# --cov-fail-under=80

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, requires DB/services)
    slow: Slow tests (may take >5 seconds)
    asyncio: Async tests (automatically applied)
    requires_gpu: Tests that require GPU (skip on CPU-only systems)
    requires_model: Tests that require ML models to be downloaded
    smoke: Smoke tests (critical path, run first)

# Coverage settings
[coverage:run]
source = app
omit = 
    */tests/*
    */migrations/*
    */__init__.py
    */config.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

exclude_lines =
    # Standard pragma
    pragma: no cover
    
    # Don't complain about missing debug-only code
    def __repr__
    def __str__
    
    # Don't complain if tests don't hit defensive assertion code
    raise AssertionError
    raise NotImplementedError
    
    # Don't complain if non-runnable code isn't run
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    
    # Don't complain about abstract methods
    @abstractmethod
    @abc.abstractmethod

[coverage:html]
directory = htmlcov
